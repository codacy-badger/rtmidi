# -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.


# initialize the variables for the makefile
AC_SUBST(noinst_LIBRARIES)
AC_SUBST(noinst_PROGRAMS)
AC_SUBST(TESTS)
AC_SUBST(SUBDIRS)
AC_SUBST(lib_LTLIBRARIES)
AC_SUBST(EXTRA_DIST)
AC_SUBST(RTMIDI_TS_SUFFIX,[ts])

# Checks for programs.
AC_PROG_CXX
dnl AM_PROG_AR
dnl AC_PATH_PROG(AR, ar, no)
dnl if [[ $AR = "no" ]] ; then
dnl    AC_MSG_ERROR("Could not find ar - needed to create a library");
dnl fi

LT_INIT([win32-dll])

# Checks for header files.
AC_HEADER_STDC
#AC_CHECK_HEADERS(sys/ioctl.h unistd.h)

AC_ARG_ENABLE(suffix,
AS_HELP_STRING([--with-suffix],[add a suffix to the library. Default is $rtmidi_suffix]),
[AS_IF(test "x$enableval" = "xno",
	    [ rtmidi_suffix=""],
	    [ rtmidi_suffix="$enableval"])])
AC_SUBST(rtmidi_suffix)

# Check for debug
AC_MSG_CHECKING(whether to compile debug version)
AC_ARG_ENABLE(debug,
  [  --enable-debug = enable various debug output],
  [
  AC_SUBST( RTMIDI_CPPFLAGS, [-D__RTMIDI_DEBUG__] )
  AC_SUBST( RTMIDI_CXXFLAGS, [-g] )
  AC_MSG_RESULT(yes)],
  [AC_SUBST( RTMIDI_CPPFLAGS, [] )
  AC_SUBST( RTMIDI_CXXFLAGS, [-O3] )
  AC_MSG_RESULT(no)])

dnl # Set paths if prefix is defined
dnl if test "x$prefix" != "x" && test "x$prefix" != "xNONE"; then
dnl  LIBS="$LIBS -L$prefix/lib"
dnl  CPPFLAGS="$CPPFLAGS -I$prefix/include"
dnl fi

# Check compiler and use -Wall if supported.
for flag in -Wall -Wextra
do
	tmpcxxflags="$CXXFLAGS"
	CXXFLAGS="$CXXFLAGS $flag"
	AC_MSG_CHECKING([whether $CXX supports $flag])
      	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
	    	          [AC_MSG_RESULT([yes])],
			  [CXXFLAGS="$tmpcxxflags"
              		   AC_MSG_RESULT([no])])
	AC_LANG_PUSH(C)
	tmpcflags="$CFLAGS"
	CFLAGS="$CFLAGS $flag"
	AC_MSG_CHECKING([whether $CC supports $flag])
      	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
	                  [AC_MSG_RESULT([yes])],
			  [CFLAGS="$tmpcflags"
        		   AC_MSG_RESULT([no])])
	AC_LANG_POP(C)
done


dnl mudflap is not possible with g++ 4.7.1 and wxWidgets 2.8
dnl	       tmpcxxflags="$CXXFLAGS"
dnl	       tmplibs="$LIBS"
dnl	       CXXFLAGS="$CXXFLAGS -fmudflapth"
dnl	       LIBS="-lmudflapth"
dnl	       AC_MSG_CHECKING([whether $CXX supports  -fmudflapth -lmudflapth])
dnl      	       AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
dnl	       			[AC_MSG_RESULT([yes])],
dnl				[CXXFLAGS="$tmpcxxflags"
dnl				LIBS="$tmplibs"]
dnl	       			[AC_MSG_RESULT([no])])
dnl

AC_ARG_ENABLE(address-sanitizer,
	AS_HELP_STRING([--enable-address-sanitizer],[Enable gcc/clang address santizer]),
	[AS_IF(test "$enableval" = yes,

	       AC_LANG_PUSH(C++)
	       for flag in  -fsanitize=address  -fno-omit-frame-pointer  -fno-common
	       do
		       tmpcxxflags="$CXXFLAGS"
		       CXXFLAGS="$CXXFLAGS $flag"
		       AC_MSG_CHECKING([whether $CXX supports $flag])
		       AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
		                         [AC_MSG_RESULT([yes])],
					 [CXXFLAGS="$tmpcxxflags"
			         AC_MSG_RESULT([no])])
			AC_LANG_PUSH(C)
			tmpcflags="$CFLAGS"
			CFLAGS="$CFLAGS $flag"
			AC_MSG_CHECKING([whether $CC supports $flag])
			AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
		                          [AC_MSG_RESULT([yes])],
					  [CFLAGS="$tmpcflags"
			          AC_MSG_RESULT([no])])
			AC_LANG_POP(C)
	       done
	       AC_LANG_POP(C++)
	       )
	]
)

AC_ARG_ENABLE(thread-sanitizer,
	AS_HELP_STRING([--enable-thread-sanitizer],[Enable gcc/clang thread santizer]),
	[AS_IF(test "$enableval" = yes,
	       AC_LANG_PUSH(C++)
	       for flag in  -fsanitize=thread  -fno-omit-frame-pointer  -fno-common -fPIC
	       do
		       tmpcxxflags="$CXXFLAGS"
		       CXXFLAGS="$CXXFLAGS $flag"
		       AC_MSG_CHECKING([whether $CXX supports $flag])
		       AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
		                         [AC_MSG_RESULT([yes])],
					 [CXXFLAGS="$tmpcxxflags"
			         AC_MSG_RESULT([no])])
		       AC_LANG_PUSH(C)
		       tmpcflags="$CFLAGS"
		       CFLAGS="$CFLAGS $flag"
		       AC_MSG_CHECKING([whether $CC supports $flag])
		       AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
		                         [AC_MSG_RESULT([yes])],
					 [CFLAGS="$tmpcflags"
			         AC_MSG_RESULT([no])])
		       AC_LANG_POP(C)
	       done
	       for flag in  -pie
	       do
		       tmpldflags="$LDFLAGS"
		       LDFLAGS="$LDFLAGS $flag"
		       AC_MSG_CHECKING([whether $LD supports $flag])
		       AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
		                         [AC_MSG_RESULT([yes])],
					 [LDFLAGS="$tmpldflags"
			         AC_MSG_RESULT([no])])
	       done
	       AC_LANG_POP(C++)
	       )
	]
)

dnl AC_SUBST( sharedlib, ["librtmidi.so"] )
dnl AC_SUBST( sharedname, ["librtmidi.so.\$(RELEASE)"] )
dnl AC_SUBST( libflags, ["-shared -Wl,-soname,\$(SHARED).\$(MAJOR) -o \$(SHARED).\$(RELEASE)"] )
dnl case $host in
dnl  *-apple*)
dnl  AC_SUBST( sharedlib, ["librtmidi.dylib"] )
dnl  AC_SUBST( sharedname, ["librtmidi.\$(RELEASE).dylib"] )
dnl  AC_SUBST( libflags, ["-dynamiclib -o librtmidi.\$(RELEASE).dylib"] )
dnl esac

AC_SUBST( RTMIDI_TS_API, [""] )
AC_SUBST( req, [""] )
AC_MSG_CHECKING(for MIDI API)
have_virtual_devices=no
case $host in
  *-*-linux*)
  AC_ARG_WITH(jack, [  --with-jack = choose JACK server support (mac and linux only)], [
  have_virtual_devices=yes
  RTMIDI_TS_API="$RTMIDI_TS_API -D__UNIX_JACK__"
  AC_MSG_RESULT(using JACK)
  AC_CHECK_LIB(jack, jack_client_open, , AC_MSG_ERROR(JACK support requires the jack library!))], )
  AC_LANG_PUSH(C++)
  AC_TRY_COMPILE([
#include <jack/jack.h>
	 ],[
return jack_port_uuid(NULL);
       ],RTMIDI_TS_API="$RTMIDI_TS_API -D__UNIX_JACK_HAS_UUID__")
  AC_LANG_POP(C++)

  # Look for ALSA flag
  AC_ARG_WITH(alsa, [  --with-alsa = choose native ALSA sequencer API support (linux only)], [
    have_virtual_devices=yes
    RTMIDI_TS_API="$RTMIDI_TS_API -D__LINUX_ALSA__"
    req="$req alsa"
    AC_MSG_RESULT(using ALSA)
    AC_CHECK_LIB(asound, snd_seq_open, , AC_MSG_ERROR(ALSA support requires the asound library!))], )

  if [test "$RTMIDI_TS_API" == "";] then
    AC_MSG_RESULT(using ALSA)
    AC_SUBST( RTMIDI_TS_API, [-D__LINUX_ALSA__] )
    req="$req alsa"
    have_virtual_devices=yes
    AC_CHECK_LIB(asound, snd_seq_open, , AC_MSG_ERROR(ALSA sequencer support requires the asound library!))
  fi

  # Checks for pthread library.
  AC_CHECK_LIB(pthread, pthread_create, , AC_MSG_ERROR(RtMidi requires the pthread library!))
  ;;

  *-apple*)
  AC_ARG_WITH(jack, [  --with-jack = choose JACK server support (mac and linux only)], [
  have_virtual_devices=yes
  RTMIDI_TS_API="$RTMIDI_TS_API -D__UNIX_JACK__"
  AC_MSG_RESULT(using JACK)
  AC_CHECK_LIB(jack, jack_client_open, , AC_MSG_ERROR(JACK support requires the jack library!))], )
  AC_LANG_PUSH(C++)
  AC_TRY_COMPILE([
#include <jack/jack.h>
	 ],[
return jack_port_uuid(NULL);
       ],RTMIDI_TS_API="$RTMIDI_TS_API -D__UNIX_JACK_HAS_UUID__")
  AC_LANG_POP(C++)

  # Look for Core flag
  AC_ARG_WITH(core, [  --with-core = choose CoreMidi API support (mac only)], [
    have_virtual_devices=yes
    RTMIDI_TS_API="$RTMIDI_TS_API -D__MACOSX_CORE__"
    AC_MSG_RESULT(using CoreMidi)
    AC_CHECK_HEADER(CoreMIDI/CoreMIDI.h, [], [AC_MSG_ERROR(CoreMIDI header files not found!)] )
    RTMIDI_TS_LIBS="$RTMIDI_TS_LIBS -framework CoreMIDI -framework CoreFoundation -framework CoreAudio" ], )

  # If no api flags specified, use CoreMidi
  if [test "$RTMIDI_TS_API" == ""; ] then
    have_virtual_devices=yes
    AC_SUBST( RTMIDI_TS_API, [-D__MACOSX_CORE__] )
    AC_MSG_RESULT(using CoreMidi)
    AC_CHECK_HEADER(CoreMIDI/CoreMIDI.h,
      [],
      [AC_MSG_ERROR(CoreMIDI header files not found!)] )
    AC_SUBST( RTMIDI_TS_LIBS, ["-framework CoreMIDI -framework CoreFoundation -framework CoreAudio"] )
  fi
  ;;

  *-mingw32*)
  
  # Look for WinMM flag
  AC_ARG_WITH(winmm, [  --with-winmm = choose Windows MultiMedia (MM) API support (windoze only)], [
    RTMIDI_TS_API="$RTMIDI_TS_API -D__WINDOWS_MM__"
    AC_MSG_RESULT(using WinMM)
    AC_SUBST( RTMIDI_TS_LIBS, [-lwinmm] )], )

  AC_ARG_WITH(winks, [  --with-winks = choose kernel streaming support (windoze only)], [
    api="$RTMIDI_TS_API -D__WINDOWS_KS__"
    AC_SUBST( RTMIDI_TS_LIBS, ["-lsetupapi -lksuser"] )
    AC_MSG_RESULT(using kernel streaming) ], )

  # I can't get the following check to work so just manually add the library
	# or could try the following?  AC_LIB_WINMM([midiOutGetNumDevs])
  # AC_CHECK_LIB(winmm, midiInGetNumDevs, , AC_MSG_ERROR(Windows MIDI support requires the winmm library!) )],)

  # If no RTMIDI_TS_API flags specified, use WinMM
  if [test "$RTMIDI_TS_API" == "";] then
    AC_SUBST( RTMIDI_TS_API, [-D__WINDOWS_MM__] )
    AC_MSG_RESULT(using WinMM)
    AC_SUBST( RTMIDI_TS_LIBS, [-lwinmm] )
  fi

  AC_CACHE_CHECK([where to find support dlls], [ac_cv_rtmidi_ts_mingw_dll_dirs],
  [
       gccsearchdirs=`$CXX $CXXFLAGS -print-search-dirs|\
			sed -e '/^libraries:/ { s/^libraries: *=\?//;s/:/ /g; p } ; d'`
       SEARCHDIRS="$DLLSEARCHPATH"
       for d in \
           $gccsearchdirs \
       	   /usr/share/doc/mingw32-runtime \
	   /usr/$host/bin \
	   /usr/$host/lib \
	   /usr/bin/$host/ \
	   /usr/lib/$host/ \
	   /usr/lib/$host/lib \
	   /usr/lib/$host/bin \
	   /usr/bin/$host/lib \
	   /usr/bin/$host/bin \
	   /mingw/lib \
	   /mingw/bin \
	   /usr/lib \
	   /lib \
	   /usr/bin \
	   /bin
       do
	  AS_IF(test -d $d,
	  [ SEARCHDIRS="$SEARCHDIRS $d" ])
       done
       ac_cv_rtmidi_ts_mingw_dll_dirs="$SEARCHDIRS"
  ])

  AC_SUBST(DLLSEARCHPATH,"$ac_cv_rtmidi_ts_mingw_dll_dirs")

  ;;

  *)
  # Default case for unknown realtime systems.
  AC_MSG_ERROR(Unknown system type for MIDI support!)
  ;;
esac
AM_CONDITIONAL(HAVE_VIRTUAL_DEVICES,test "$have_virtual_devices" == yes)
AM_GNU_GETTEXT([external])
AM_GNU_GETTEXT_VERSION([0.19.8])

if test "x$rtmidicopydlls" = "x"
then
	rtmidicopydlls=false
fi

AM_CONDITIONAL(RTMIDICOPYDLLS,$rtmidicopydlls && test -n "$DLLSEARCHPATH")


AC_LANG(C++)
AC_CACHE_CHECK([fallthrough syntax in the C++ language], ac_cv_cxx_fallthrough,
[
AC_COMPILE_IFELSE([
	AC_LANG_PROGRAM([
	int j;
	void test(int i) { switch (i) { case 1: j = 3; [[[fallthrough]]] ; case 2: j++; }}
	],[])],[ac_cv_cxx_fallthrough="[[[fallthrough]]]"],[
	AC_COMPILE_IFELSE([
		AC_LANG_PROGRAM([
		int j;
		void test(int i) { switch (i) { case 1: j = 3; [[[gnu::fallthrough]]] ; case 2: j++; }}
		],[])],[ac_cv_cxx_fallthrough="[[[gnu::fallthrough]]]"],[
		AC_COMPILE_IFELSE([
			AC_LANG_PROGRAM([
			int j;
			void test(int i) { switch (i) { case 1: j = 3; __attribute__((fallthrough)) ; case 2: j++; }}
			],[])],[ac_cv_cxx_fallthrough="__attribute__((fallthrough))"],[
			ac_cv_cxx_fallthrough=""
		]);
	]);
]);
])
AC_DEFINE_UNQUOTED(mutfallthrough,[$ac_cv_cxx_fallthrough],[syntax for swtich case fallthrough attributes in C++])
